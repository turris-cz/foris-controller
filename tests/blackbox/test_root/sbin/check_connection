#! /usr/bin/env python

import json
from time import sleep
from sys import stdout

# location for source mock


# this is actually taken from the original shell script
# in any case check_connection is modifyied, please update accordingly
IP4 = ["217.31.205.50", "198.41.0.4", "199.7.83.42", "8.8.8.8"]
IP6 = [
    "2001:1488:0:3::2",
    "2001:500:3::42",
    "2001:500:2d::d",
    "2606:2800:220:6d:26bf:1447:1097:aa7",
]
NAMES = ["api.turris.cz", "www.nic.cz", "c.root-servers.net"]
BAD_NAME = "www.rhybar.cz"

# Not really neccessary to have, but it may come in handy for some case
SLEEP = 2
OFFSET = 2


# Define dataclasses for rendered output
RES_MAPPINGS = {
    "ipv4": ("IPv4", IP4),
    "ipv4gw": ("IPv4 Gateway", ["192.168.1.1"]),
    "ipv6": ("IPv6", IP6),
    "ipv6gw": ("IPv6 Gateway", ["28af:189:4::26bf:1447:1097:aa7%eth0"]),
    "dns": ("DNS", NAMES),
    "dnssec": ("DNSSEC", [BAD_NAME]),
}

# json lader hepler func
def read_json(path: str):
    with open(path, "r") as f:
        return json.load(f)


class ConnTest:
    """Heleper class to create results similar to shell script on router.
    To mock the results modify by Faker file in location
    `/tmp/foris_conn_test/results.json`

    example:
    ```json
    {
        "dns": "FAILED",
        "ip4": "UNKNOWN"
    }
    ```
    """

    def __init__(self) -> None:
        self.params: dict = read_json("/tmp/foris_conn_test/results.json")

    def setup(self):
        """resulting stdout property is list of lines to be rendered to output"""
        self.payload = []

        # take everything from map and compose payload using mocked file
        for test, tup in RES_MAPPINGS.items():
            test_result = self.params.get(test, "OK")  # default is OK
            display_name, items = tup  # split for further work
            action = "Pinging"
            if test.startswith("dns"):
                # needs extra behaviour with dns and dnssec
                action = "Resolving"
            for addres in items:
                self.payload.append(f"{action} {addres} ... {test_result}\n")
            self.payload.append(f"{display_name}: {test_result}\n")

    def propagate(self, _sleep=SLEEP, offset=OFFSET):
        """Action where the result is rendered to stdout."""
        while len(self.payload) > offset:
            stdout.write(self.payload.pop(0))
            stdout.flush()  # flush method flushes the buffer
            # that means everything in the buffer goes to stdout
            sleep(0.1)
        # resolving dns always takes some extra seconds
        last, rest = self.payload.pop(0).split("...")
        # pretend you are trying to resolve something
        stdout.write(
            f"{last}...",
        )
        stdout.flush()
        # `Resolving www.rhybar.cz ...`
        sleep(_sleep)
        stdout.write(rest)
        # prints the rest
        for line in self.payload:
            print(line, end="")
        # following lines are printed out


if __name__ == "__main__":
    c = ConnTest()
    c.setup()
    c.propagate()
